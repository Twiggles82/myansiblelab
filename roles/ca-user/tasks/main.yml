---

- name: install NuGet
  win_shell: Install-PackageProvider -Name Nuget -Force

- name: Create folder for JSON templates to be copied into
  win_shell: new-item C:\temp -itemtype directory
  ignore_errors: yes

- name: change DNS server
  when: not ansible_windows_domain_member
  win_dns_client:
    adapter_names: '*'
    ipv4_addresses: "{{ hostvars[groups['ad-user'][0]]['groups']['ad-user'] }}"

- name: Deploy ComputerManagementDsc module
  win_psmodule:
    name: ComputerManagementDsc
    accept_license: yes
    state: present

- name: enable IIS feature
  win_dsc:
    resource_name: WindowsFeature
    Name: "{{ item }}"
    IncludeAllSubFeature: True
    Ensure: Present
  register: install_iis
  ignore_errors: yes
  loop:
    - Web-Server

- name: Add computer to domain
  win_dsc:
    resource_name:  Computer
    Name: 'ca-user'
    DomainName:  "{{ user_domain_name }}.{{ root_domain_name }}"
    Credential_username: "{{ user_dom_admin_username }}@{{ user_domain_name }}.{{ root_domain_name }}"
    Credential_password: "{{ user_dom_admin_password }}"
  register: certauth

- name: Reboot after domain joined and IIS installed
  win_reboot:
  when: certauth.reboot_required

- name: Wait for system to become reachable over WinRM
  wait_for_connection:
    timeout: 900

- name: Deploy ActiveDirectoryCSDsc module
  win_psmodule:
    name: ActiveDirectoryCSDsc
    state: present

- name: enable ADCS-Cert-Authority feature
  win_dsc:
    resource_name: WindowsFeature
    Name: "{{ item }}"
    IncludeAllSubFeature: True
    Ensure: Present
  register: install_adcs
  ignore_errors: yes
  loop:
    - ADCS-Cert-Authority

- name: Create Enterprise Certificate Authority
  win_dsc:
    IsSingleInstance: "Yes"
    resource_name:  AdcsCertificationAuthority
    CAType: 'EnterpriseRootCA'
    CryptoProviderName: 'RSA#Microsoft Software Key Storage Provider'
    KeyLength: 2048
    HashAlgorithmName: 'SHA256'
    Credential_username: "{{ user_dom_admin_username }}@{{ user_domain_name }}.{{ root_domain_name }}"
    Credential_password: "{{ user_dom_admin_password }}"
    CACommonName: user-usz-ca
    CADistinguishedNameSuffix: DC=user,DC=usz,DC=local
    ValidityPeriod: 'Years'
    ValidityPeriodUnits: 10
    DatabaseDirectory: "C:\\Windows\\system32\\CertLog"
    LogDirectory: "C:\\Windows\\system32\\CertLog"
    Ensure: Present
  register: ca_configured

- name: enable additional features for CA
  win_dsc:
    resource_name: WindowsFeature
    Name: "{{ item }}"
    IncludeAllSubFeature: True
    Ensure: Present
  register: install_adcs
  ignore_errors: yes
  loop:
    - ADCS-Enroll-Web-Pol
    - ADCS-Web-Enrollment
    - RSAT-ADCS
    - RSAT-ADCS-mgmt
    - AD-Domain-Services

- name: Web Enrollment feature 
  win_dsc:
    resource_name:  AdcsWebEnrollment
    Credential_username: "{{ user_dom_admin_username }}@{{ user_domain_name }}.{{ root_domain_name }}"
    Credential_password: "{{ user_dom_admin_password }}"
    IsSingleInstance: "Yes"
    Ensure: Present
  register: AdcsWebEnrollment_configured

# ISSUE AT THIS PART WHEN RUNNING THAT SAYS: - fatal: [10.180.25.21]: FAILED! => {"changed": false, "module_version": "5.0.0", "msg": "Failed to invoke DSC Test method: CCertConfig::GetConfig: The system cannot find the file specified. 0x80070002 (WIN32: 2 ERROR_FILE_NOT_FOUND)", "reboot_required": false}
# - name: Authority Information Access 
#   win_dsc:
#     resource_name:  AdcsAuthorityInformationAccess
#     IsSingleInstance: "Yes"
#     OcspUri: "http://ocsp-user.ugly.usz.local/ocsp"
#     AllowRestartService: True
#   tags: fromhere
  
# - name: Copy USER-TEMPLATE
#   win_copy:
#     src: ./user-modified.json
#     dest: C:\temp\user-modified.json
#   tags: fromhere
  
# - name: Install AdcsTemplate module
#   win_shell: "Install-Module AdcsTemplate -Force"

# - name: Import AdcsTemplate module
#   win_shell: "Import-Module AdcsTemplate -Force"
#   tags: fromhere
  
# - name: Change startup type for Active Directory Web Services service
#   win_shell: "Set-Service -Name ADWS -StartupType Automatic"
#   tags: fromhere
  
# - name: Start Active Directory Web Services service
#   win_shell: "Start-Service -Name ADWS"
#   tags: fromhere
  
# # USER TEMPLATE
# - name: Get whoami information - domain
#   win_whoami:
#   vars:
#     ansible_become: yes
#     ansible_become_method: runas
#     Credential_username: "{{ user_dom_admin_username }}@{{ user_domain_name }}.{{ root_domain_name }}"
#     Credential_password: "{{ user_dom_admin_password }}"
#   tags: fromhere
  
# - name: Declare PowerShell script to use for USER template
#   set_fact:
#     install_command_user: |-
#       New-ADCSTemplate -DisplayName user-modified -JSON (Get-Content C:\temp\user-modified.json -Raw) -Identity "Domain Users" -AutoEnroll -Publish
#   tags: fromhere
  
# - name: Show command declared above for USER template
#   debug:
#     var: install_command_user
#     verbosity: 0
#   tags: fromhere
  
# - name: Create new user template run as domain admin
#   win_shell: "{{ install_command_user }}"
#   vars:
#     ansible_become: yes
#     ansible_become_method: runas
#     ansible_become_user: "{{ user_dom_admin_username }}@{{ user_domain_name }}.{{ root_domain_name }}"
#     ansible_become_password: "{{ user_dom_admin_password }}"
#   tags: fromhere
  
# - name: WHOAMI
#   win_command: whoami.exe

# - name: Create new COMPUTER template
#   become_method: runsas
#   become: yes
#   become_user: "{{ domain_admin_username }}@{{ user_domain_name }}"
#   win_shell: "{{ install_command_comp }}"

# - name: Declare PowerShell script to use for USER template
#   set_fact:
#     install_command_user: |-
#       New-ADCSTemplate -DisplayName user-modified -JSON (Get-Content C:\temp\user-modified.json -Raw) -Identity "Domain Users" -AutoEnroll -Publish

# - name: Show command declared above for USER template
#   debug:
#     var: install_command_user
#     verbosity: 0

# - name: Create new USER template
#   become: true
#   become_user: dxcadmin
#   win_shell: "{{ install_command_user }}"


# - name: Run powershell to get the thumbprint hash
#   ansible.windows.win_powershell:
#     script: |
#          (Get-ChildItem cert:\LocalMachine\CA  | where-object { $_.Subject -like "*usz*" } | Select-Object -Last 1).Thumbprint
#   register: hash

# - name: Print information from gathering thumbprint hash
#   ansible.builtin.debug:
#     var: hash
#     verbosity: 2

# - name: Set value of SSL hash gathered above
#   set_fact:
#     thumbprint: "{{ hash.output[0] }}"

# - debug: 
#    msg: '{{ thumbprint}}'

# # - name: Declare $Thumbprint as a PowerShell variable
# #   ansible.windows.win_powershell:
# #     script: |
# #          $Thumbprint=(Get-ChildItem cert:\LocalMachine\CA  | where-object { $_.Subject -like "*usz*" } | Select-Object -Last 1).Thumbprint
# #   register: PowerShellThumbprint

# - name: Configure Certificate Enrollment Policy Web Service using PowerShell
#   win_shell: Install-AdcsEnrollmentPolicyWebService -AuthenticationType Kerberos -SSLCertThumbprint "{{PowerShellThumbprint}}" -Force         
#   Credential_username: "{{ domain_admin_username }}@{{ user_domain_name }}"
#   Credential_password: "{{ domain_admin_password }}"

# # - win_command: whoami.exe /all